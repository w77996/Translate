package com.wtwd.translate.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wtwd.translate.bean.Guest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GUEST".
*/
public class GuestDao extends AbstractDao<Guest, Void> {

    public static final String TABLENAME = "GUEST";

    /**
     * Properties of entity Guest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GuestId = new Property(0, int.class, "guestId", false, "GUEST_ID");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Flag = new Property(4, int.class, "flag", false, "FLAG");
        public final static Property UserLabel = new Property(5, String.class, "userLabel", false, "USER_LABEL");
        public final static Property UserMotherLanguage = new Property(6, String.class, "userMotherLanguage", false, "USER_MOTHER_LANGUAGE");
        public final static Property CreateDate = new Property(7, long.class, "createDate", false, "CREATE_DATE");
        public final static Property OpenId = new Property(8, String.class, "openId", false, "OPEN_ID");
        public final static Property OpenAppName = new Property(9, String.class, "openAppName", false, "OPEN_APP_NAME");
        public final static Property HeadImg = new Property(10, String.class, "headImg", false, "HEAD_IMG");
        public final static Property HardwareInfo = new Property(11, String.class, "hardwareInfo", false, "HARDWARE_INFO");
        public final static Property MacAddress = new Property(12, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property HardwareUUID = new Property(13, String.class, "hardwareUUID", false, "HARDWARE_UUID");
    }


    public GuestDao(DaoConfig config) {
        super(config);
    }
    
    public GuestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GUEST\" (" + //
                "\"GUEST_ID\" INTEGER NOT NULL ," + // 0: guestId
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"PASSWORD\" TEXT," + // 3: password
                "\"FLAG\" INTEGER NOT NULL ," + // 4: flag
                "\"USER_LABEL\" TEXT," + // 5: userLabel
                "\"USER_MOTHER_LANGUAGE\" TEXT," + // 6: userMotherLanguage
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 7: createDate
                "\"OPEN_ID\" TEXT," + // 8: openId
                "\"OPEN_APP_NAME\" TEXT," + // 9: openAppName
                "\"HEAD_IMG\" TEXT," + // 10: headImg
                "\"HARDWARE_INFO\" TEXT," + // 11: hardwareInfo
                "\"MAC_ADDRESS\" TEXT," + // 12: macAddress
                "\"HARDWARE_UUID\" TEXT);"); // 13: hardwareUUID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GUEST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Guest entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGuestId());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindLong(5, entity.getFlag());
 
        String userLabel = entity.getUserLabel();
        if (userLabel != null) {
            stmt.bindString(6, userLabel);
        }
 
        String userMotherLanguage = entity.getUserMotherLanguage();
        if (userMotherLanguage != null) {
            stmt.bindString(7, userMotherLanguage);
        }
        stmt.bindLong(8, entity.getCreateDate());
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(9, openId);
        }
 
        String openAppName = entity.getOpenAppName();
        if (openAppName != null) {
            stmt.bindString(10, openAppName);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(11, headImg);
        }
 
        String hardwareInfo = entity.getHardwareInfo();
        if (hardwareInfo != null) {
            stmt.bindString(12, hardwareInfo);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(13, macAddress);
        }
 
        String hardwareUUID = entity.getHardwareUUID();
        if (hardwareUUID != null) {
            stmt.bindString(14, hardwareUUID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Guest entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGuestId());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindLong(5, entity.getFlag());
 
        String userLabel = entity.getUserLabel();
        if (userLabel != null) {
            stmt.bindString(6, userLabel);
        }
 
        String userMotherLanguage = entity.getUserMotherLanguage();
        if (userMotherLanguage != null) {
            stmt.bindString(7, userMotherLanguage);
        }
        stmt.bindLong(8, entity.getCreateDate());
 
        String openId = entity.getOpenId();
        if (openId != null) {
            stmt.bindString(9, openId);
        }
 
        String openAppName = entity.getOpenAppName();
        if (openAppName != null) {
            stmt.bindString(10, openAppName);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(11, headImg);
        }
 
        String hardwareInfo = entity.getHardwareInfo();
        if (hardwareInfo != null) {
            stmt.bindString(12, hardwareInfo);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(13, macAddress);
        }
 
        String hardwareUUID = entity.getHardwareUUID();
        if (hardwareUUID != null) {
            stmt.bindString(14, hardwareUUID);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Guest readEntity(Cursor cursor, int offset) {
        Guest entity = new Guest( //
            cursor.getInt(offset + 0), // guestId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.getInt(offset + 4), // flag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userLabel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userMotherLanguage
            cursor.getLong(offset + 7), // createDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // openId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // openAppName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // headImg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // hardwareInfo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // macAddress
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // hardwareUUID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Guest entity, int offset) {
        entity.setGuestId(cursor.getInt(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFlag(cursor.getInt(offset + 4));
        entity.setUserLabel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserMotherLanguage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateDate(cursor.getLong(offset + 7));
        entity.setOpenId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOpenAppName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHeadImg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHardwareInfo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMacAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHardwareUUID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Guest entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Guest entity) {
        return null;
    }

    @Override
    public boolean hasKey(Guest entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
