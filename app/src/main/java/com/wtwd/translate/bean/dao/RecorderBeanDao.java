package com.wtwd.translate.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wtwd.translate.bean.RecorderBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORDER_BEAN".
*/
public class RecorderBeanDao extends AbstractDao<RecorderBean, Void> {

    public static final String TABLENAME = "RECORDER_BEAN";

    /**
     * Properties of entity RecorderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Language_type = new Property(0, String.class, "language_type", false, "LANGUAGE_TYPE");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property MRecorderTxt = new Property(2, String.class, "mRecorderTxt", false, "M_RECORDER_TXT");
        public final static Property MResultTxt = new Property(3, String.class, "mResultTxt", false, "M_RESULT_TXT");
        public final static Property MFilePath = new Property(4, String.class, "mFilePath", false, "M_FILE_PATH");
    }


    public RecorderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RecorderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORDER_BEAN\" (" + //
                "\"LANGUAGE_TYPE\" TEXT," + // 0: language_type
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"M_RECORDER_TXT\" TEXT," + // 2: mRecorderTxt
                "\"M_RESULT_TXT\" TEXT," + // 3: mResultTxt
                "\"M_FILE_PATH\" TEXT);"); // 4: mFilePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORDER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecorderBean entity) {
        stmt.clearBindings();
 
        String language_type = entity.getLanguage_type();
        if (language_type != null) {
            stmt.bindString(1, language_type);
        }
        stmt.bindLong(2, entity.getType());
 
        String mRecorderTxt = entity.getMRecorderTxt();
        if (mRecorderTxt != null) {
            stmt.bindString(3, mRecorderTxt);
        }
 
        String mResultTxt = entity.getMResultTxt();
        if (mResultTxt != null) {
            stmt.bindString(4, mResultTxt);
        }
 
        String mFilePath = entity.getMFilePath();
        if (mFilePath != null) {
            stmt.bindString(5, mFilePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecorderBean entity) {
        stmt.clearBindings();
 
        String language_type = entity.getLanguage_type();
        if (language_type != null) {
            stmt.bindString(1, language_type);
        }
        stmt.bindLong(2, entity.getType());
 
        String mRecorderTxt = entity.getMRecorderTxt();
        if (mRecorderTxt != null) {
            stmt.bindString(3, mRecorderTxt);
        }
 
        String mResultTxt = entity.getMResultTxt();
        if (mResultTxt != null) {
            stmt.bindString(4, mResultTxt);
        }
 
        String mFilePath = entity.getMFilePath();
        if (mFilePath != null) {
            stmt.bindString(5, mFilePath);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RecorderBean readEntity(Cursor cursor, int offset) {
        RecorderBean entity = new RecorderBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // language_type
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mRecorderTxt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mResultTxt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // mFilePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecorderBean entity, int offset) {
        entity.setLanguage_type(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setMRecorderTxt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMResultTxt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMFilePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RecorderBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RecorderBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(RecorderBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
